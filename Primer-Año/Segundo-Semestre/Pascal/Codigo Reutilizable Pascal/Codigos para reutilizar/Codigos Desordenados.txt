Type

  // Lista
  lista = ^nodoL;
  nodoL = record
    dato: datoslista;
    sig: lista;
  end;


  //Arbol
   arbol= ^nodoA;
  nodoA = Record
    dato: datosarbol;
    HI: arbol;
    HD: arbol;
  end;

{-----------------------------------------------------------------------------

Procedure agregarAdelante(var l: listaTweets; t: tweet);
var
   aux: listaTweets;
begin
     new(aux);
     aux^.dato := t;
     aux^.sig := l;
     l:= aux;
end;

{-----------------------------------------------------------------------------

procedure agregarOrdenado(var pri:listaTweets; t:tweet);
var
   nuevo, anterior, actual: listaTweets;
begin
     new (nuevo);
     nuevo^.dato:= t;
     nuevo^.sig := nil;
     if (pri = nil) then
          pri := nuevo
     else
     begin
          actual := pri;
          anterior := pri;
          while (actual<>nil) and (actual^.dato.nombreUsuario < nuevo^.dato .nombreUsuario) do begin
               anterior := actual;
               actual:= actual^.sig;
          end;
          if (anterior = actual) then
               pri := nuevo
          else
               anterior^.sig := nuevo;
          nuevo^.sig := actual;
     end;
end;

{-----------------------------------------------------------------------------

procedure generarNuevaEstructura (lT: listaTweets; VAR listaOrdenada: listaTweets);
begin
     listaOrdenada := nil;
     while(lT <> nil) do begin
          agregarOrdenado(listaOrdenada, lT^.dato);
          lT := lT^.sig;
     end;
end;

{-----------------------------------------------------------------------------

Procedure AgregarAtras (var l, ult: listaNivel; a:arbol);
 var nue:listaNivel;

 begin
 new (nue);
 nue^.info := a;
 nue^.sig := nil;
 if l= nil then l:= nue
           else ult^.sig:= nue;
 ult:= nue;
 end;

{-----------------------------------------------------------------------------
IMPRIMIRPORNIVEL - Muestra los datos del árbol a por niveles }

Procedure imprimirpornivel(a: arbol);
var
   l, aux, ult: listaNivel;
   nivel, cant, i: integer;
begin
   l:= nil;
   if(a <> nil)then begin
                 nivel:= 0;
                 agregarAtras (l,ult,a);
                 while (l<> nil) do begin
                    nivel := nivel + 1;
                    cant:= contarElementos(l);
                    write ('Nivel ', nivel, ': ');
                    for i:= 1 to cant do begin
                      write (l^.info^.dato, ' - ');
                      if (l^.info^.HI <> nil) then agregarAtras (l,ult,l^.info^.HI);
                      if (l^.info^.HD <> nil) then agregarAtras (l,ult,l^.info^.HD);
                      aux:= l;
                      l:= l^.sig;
                      dispose (aux);
                     end;
                     writeln;
                 end;
               end;
end;
{-----------------------------------------------------------------------------

  Procedure enOrden( a: arbol );
begin
  if ( a <> nil ) then begin
    enOrden (a^.HI);
    write (a^.dato, '   ');
    enOrden (a^.HD);
  end;
  end;

{-----------------------------------------------------------------------------

Procedure preOrden(a:arbol);
begin
if(a<>nil)then
begin
 Writeln(a^.dato,' ');
 preorden(a^.HI);
 preorden(a^.HD);
 end;
end;

{-----------------------------------------------------------------------------

Procedure postOrden(a:arbol);
 begin
 if(a<>NIL)then
 begin
 postorden(a^.HI);
 postorden(a^.HD);
 writeln(a^.dato,' ');
 end;
end;

{-----------------------------------------------------------------------------

Procedure insertar(var a: arbol; num:integer);//sin repetidos
begin
   if (a = nil)then
    begin
      new (a);
      a^.dato:= num;
      a^.HI := nil;
      a^.HD := nil;
    end
   else
     if a^.dato> num then
      insertar(a^.HI, num)
    else
      if a^.dato< num then
       insertar(a^.HD, num)
  end;

{-----------------------------------------------------------------------------

Procedure insertararbol(var a:arbol; cod: integer);
begin
     if(a=NIL)then
     begin
         new(a);
         a^.dato.peso:=cod;
         a^.HI:=nil;
         a^.HD:=nil;
     end
     else
         if (a^.dato.peso>cod)then
             insertararbol(a^.HI,cod)
         else
             if(a^.dato.peso<cod)then
                 insertararbol(a^.HD,cod);
end;

{-----------------------------------------------------------------------------


function vermin(a:arbol):integer;
begin
  if (a<>nil) and (a^.hijoI<>nil) then
  begin
    vermin:=vermin(a^.hijoI);
  end
  else
    if a=nil then vermin:=-1
    else vermin:= a^.elemento;
end;

{-----------------------------------------------------------------------------

function Vermax(a:arbol):integer;
begin
  if (a<>nil) and (a^.hijoD<>nil) then
  begin
    Vermax:=Vermax(a^.hijoD);
  end
  else
    if a=nil then Vermax:=-1
    else Vermax:= a^.elemento;
end;

{-----------------------------------------------------------------------------

procedure BORRAR (var a:arbol; dato:integer; var resultado:boolean);
var
   aux:arbol;
begin
  if a=nil then resultado:=false
  else
    if a^.dato>dato then BORRAR(a^.HI,dato,resultado)
    else
      if a^.dato<dato then BORRAR(a^.HD,dato,resultado)
      else begin
        resultado:=true;
        if (a^.HI=nil) and (a^.HD=nil) then begin
          dispose(a);
          a:=nil;
        end
        else
          if (a^.HI<>nil) and (a^.HD=nil) then begin
            aux:=a;
            a:= a^.HI;
            dispose(aux);
          end
          else
            if (a^.HI=nil) and (a^.HD<>nil) then begin
              aux:=a;
              a:= a^.HD;
              dispose(aux);
            end
            else
              if (a^.HI<>nil) and (a^.HD<>nil) then
              begin
                a^.dato:= vermin(a^.HD);
                BORRAR(a^.HD,a^.dato,resultado);
              end;
      end;

end;

{-----------------------------------------------------------------------------

Procedure valoresEnRango(a:arbol;inf:integer;sup:integer);
begin
  if (a <> nil) then
    if (a^.dato >= inf) then
      if (a^.dato <= sup) then begin
        writeln(a^.dato);
        valoresEnRango(a^.hi, inf, sup);
        valoresEnRango (a^.hd, inf, sup);
      end
      else
        valoresEnRango(a^.hi, inf, sup)
    else
      valoresEnRango(a^.hd, inf, sup);
end;

{-----------------------------------------------------------------------------    